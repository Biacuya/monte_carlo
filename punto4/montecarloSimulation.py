# -*- coding: utf-8 -*-
"""Montecarlo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a2m9dhA_BIqNsopjQnRaxe9qFzEhXOCR
"""

import numpy as np
import matplotlib.pyplot as plt
from collections import Counter

# Parámetros de la simulación
# Cantidad de simulaciones
n_juegos = 5
n_rondas = 10
equipo_size = 5

# Habilidades
resistencia_mean = 35
resistencia_std = 10
experiencia_inicial = 10
suerte_min = 1
suerte_max = 3

# Probabilidades de acierto
prob_diana_mujer = [0.30, 0.38, 0.27, 0.05]  # Central, intermedia, exterior, error
prob_diana_hombre = [0.20, 0.33, 0.40, 0.07]

# generos

generos = ["hombre", "mujer"]

# Puntos por diana
puntos_diana = [10, 9, 8, 0]  # Central, intermedia, exterior, error

# Datos a guardar por juego
mejor_suerte_por_juego = []
mas_experiencia_por_juego = []
equipo_ganador_por_juego = []
genero_mas_victorias_por_juego = []
puntajes_total_equipo_1 = []
puntajes_total_equipo_2 = []


# Función para crear un jugador
def crear_jugador(genero, nombre_player):
    nombre = nombre_player
    resistencia = max(1, int(np.random.normal(resistencia_mean, resistencia_std)))
    resistencia_aux = resistencia
    experiencia = experiencia_inicial
    suerte = np.random.uniform(suerte_min, suerte_max)
    return {
        "nombre": nombre,
        "resistencia": resistencia,
        "resistencia_aux": resistencia_aux,
        "experiencia": experiencia,
        "suerte": suerte,
        "genero": genero,
    }


# Función para realizar un lanzamiento
def lanzar(genero, jugador):
    # Reducción de resistencia por lanzamiento
    jugador["resistencia"] -= 5

    # Probabilidad de acierto en función del género
    prob_diana = prob_diana_mujer if jugador["genero"] == "mujer" else prob_diana_hombre

    # Lanzamiento
    resultado = np.random.choice(puntos_diana, p=prob_diana)
    return resultado


# Simulación de 20,000 juegos
def most_lucky(players):
    most_lucky_player = max(players, key=lambda player: player["suerte"])
    return most_lucky_player


def encontrar_suertudos(list):
    contador = Counter(list)
    for valor, cuenta in contador.items():
        if cuenta == 3:
            return valor  # Devuelve el valor que se repite 3 veces
    return None  # Si no hay ningún valor con 3 repeticiones


def simulacion_monte_carlo():
    condition = True
    cantidad_juegos = 0
    resistencia_inicial_jugador_1 = 0
    resistencia_inicial_jugador_2 = 0
    cansacio_one = 1
    cansacio_two = 2
    nueva_suerte = 0
    suerte_min = 1
    suerte_max = 3

    equipo_1 = [
        (
            crear_jugador("mujer", "jugador_eq1: " + str(i))
            if i % 2 == 0
            else crear_jugador("hombre", "jugador_eq1: " + str(i))
        )
        for i in range(equipo_size)
    ]
    equipo_2 = [
        (
            crear_jugador("mujer", "jugador_eq2: " + str(i))
            if i % 2 == 0
            else crear_jugador("hombre", "jugador_eq2: " + str(i))
        )
        for i in range(equipo_size)
    ]

    print(equipo_1)
    print(equipo_2)
    #  for juego in range(n_juegos):
    puntos_equipo_1 = 0
    puntos_equipo_2 = 0
    puntos_ronda_1 = 0
    puntos_ronda_2 = 0
    n_juegos = 5
    valor_repetido = ""
    valor_repetido2 = ""
    lucky_list = []
    lucky_list2 = []

    # Simulación de las rondas
    tiro_bonus = False
    count = 0
    while condition:

        # Lanzamientos para cada jugador de ambos equipos
        for jugador_1, jugador_2 in zip(equipo_1, equipo_2):
            resistencia_inicial_jugador_1 = jugador_1["resistencia_aux"]
            resistencia_inicial_jugador_2 = jugador_2["resistencia_aux"]

            if tiro_bonus:
                print("Tiro bonus activado")
                puntos_equipo_1 += lanzar(
                    most_lucky(equipo_1)["genero"], most_lucky(equipo_1)
                )
                lucky_list.append(most_lucky(equipo_1)["nombre"])
                print(lucky_list)

                puntos_equipo_2 += lanzar(
                    most_lucky(equipo_2)["genero"], most_lucky(equipo_2)
                )
                lucky_list2.append(most_lucky(equipo_2)["nombre"])
                print(lucky_list2)

                valor_repetido = encontrar_suertudos(lucky_list)
                valor_repetido2 = encontrar_suertudos(lucky_list2)
                print("Valor 2: ", valor_repetido2)
                
                #Tiro Extra
                if valor_repetido == most_lucky(equipo_1)["nombre"]:
                    puntos_equipo_1 += lanzar(
                        most_lucky(equipo_1)["genero"], most_lucky(equipo_1)
                    )
                    print(f"Mega Suertudo: {valor_repetido}")

                if valor_repetido2 == most_lucky(equipo_2)["nombre"]:
                    print(f"Mega Suertudo2: {valor_repetido2}")
                    puntos_equipo_2 += lanzar(
                        most_lucky(equipo_2)["genero"], most_lucky(equipo_2)
                    )

            if jugador_1["resistencia"] <= 4:
                count += 1

                nueva_suerte = np.random.uniform(suerte_min, suerte_max)
                jugador_1["suerte"] = nueva_suerte

                resistencia_inicial_jugador_1 -= max(
                    1, int(np.random.normal(cansacio_one, cansacio_two))
                )
                jugador_1["resistencia"] = resistencia_inicial_jugador_1

                tiro_bonus = True
            else:
                puntos_equipo_1 += lanzar(jugador_1["genero"], jugador_1)
                tiro_bonus = False

            if jugador_2["resistencia"] <= 4:
                count += 1

                nueva_suerte = np.random.uniform(suerte_min, suerte_max)
                jugador_2["suerte"] = nueva_suerte

                resistencia_inicial_jugador_2 -= max(
                    1, int(np.random.normal(cansacio_one, cansacio_two))
                )
                jugador_2["resistencia"] = resistencia_inicial_jugador_2

                tiro_bonus = True
            else:
                puntos_equipo_2 += lanzar(jugador_2["genero"], jugador_2)
                tiro_bonus = False

            if count == 10:
                cantidad_juegos += 1
                lucky_list = []
                lucky_list2 = []
                print("Juegos: ", cantidad_juegos)
                # print(f"Antes de reiniciar la resistencia: {jugador_1['genero']}, suerte: {jugador_1['suerte']}, exp: {jugador_1['experiencia']}, resistencia: {jugador_1['resistencia']}")
                jugador_1["resistencia"] = jugador_1["resistencia_aux"]
                # print(f"Depués de reiniciar la resistencia: {jugador_1['genero']}, suerte: {jugador_1['suerte']}, exp: {jugador_1['experiencia']}, resistencia: {jugador_1['resistencia']}")
                # print(equipo_1)
                jugador_2["resistencia"] = jugador_2["resistencia_aux"]

                if puntos_equipo_1 > puntos_equipo_2:
                    print("Equipo uno ganador: ", puntos_equipo_1)
                    print("Equipo Dos perdedor: ", puntos_equipo_2)
                    equipo_ganador_por_juego.append(1)
                else:
                    print("Equido dos ganador: ", puntos_equipo_2)
                    print("Equipo uno perdedor: ", puntos_equipo_1)
                    equipo_ganador_por_juego.append(2)
                count = 0

            if cantidad_juegos >= n_juegos:
                condition = False

    # Guardar los resultados del juego


simulacion_monte_carlo()
